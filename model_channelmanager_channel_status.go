/*
Channel Manager Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channelmanager

import (
	"encoding/json"
	"fmt"
)

// ChannelmanagerChannelStatus the model 'ChannelmanagerChannelStatus'
type ChannelmanagerChannelStatus string

// List of channelmanagerChannelStatus
const (
	CHANNELMANAGERCHANNELSTATUS_UNKNOWN ChannelmanagerChannelStatus = "CH_STATUS_UNKNOWN"
	CHANNELMANAGERCHANNELSTATUS_ACTIVE ChannelmanagerChannelStatus = "CH_STATUS_ACTIVE"
	CHANNELMANAGERCHANNELSTATUS_DISABLED ChannelmanagerChannelStatus = "CH_STATUS_DISABLED"
	CHANNELMANAGERCHANNELSTATUS_UNDER_MAINTENANCE ChannelmanagerChannelStatus = "CH_STATUS_UNDER_MAINTENANCE"
)

// All allowed values of ChannelmanagerChannelStatus enum
var AllowedChannelmanagerChannelStatusEnumValues = []ChannelmanagerChannelStatus{
	"CH_STATUS_UNKNOWN",
	"CH_STATUS_ACTIVE",
	"CH_STATUS_DISABLED",
	"CH_STATUS_UNDER_MAINTENANCE",
}

func (v *ChannelmanagerChannelStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChannelmanagerChannelStatus(value)
	for _, existing := range AllowedChannelmanagerChannelStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChannelmanagerChannelStatus", value)
}

// NewChannelmanagerChannelStatusFromValue returns a pointer to a valid ChannelmanagerChannelStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelmanagerChannelStatusFromValue(v string) (*ChannelmanagerChannelStatus, error) {
	ev := ChannelmanagerChannelStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChannelmanagerChannelStatus: valid values are %v", v, AllowedChannelmanagerChannelStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelmanagerChannelStatus) IsValid() bool {
	for _, existing := range AllowedChannelmanagerChannelStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to channelmanagerChannelStatus value
func (v ChannelmanagerChannelStatus) Ptr() *ChannelmanagerChannelStatus {
	return &v
}

type NullableChannelmanagerChannelStatus struct {
	value *ChannelmanagerChannelStatus
	isSet bool
}

func (v NullableChannelmanagerChannelStatus) Get() *ChannelmanagerChannelStatus {
	return v.value
}

func (v *NullableChannelmanagerChannelStatus) Set(val *ChannelmanagerChannelStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelmanagerChannelStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelmanagerChannelStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelmanagerChannelStatus(val *ChannelmanagerChannelStatus) *NullableChannelmanagerChannelStatus {
	return &NullableChannelmanagerChannelStatus{value: val, isSet: true}
}

func (v NullableChannelmanagerChannelStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelmanagerChannelStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

